# remove blue frame in focused areas
--- src/style/adwaitastyle.cpp	2024-09-29 20:08:32.883813057 +0200
+++ src/style/adwaitastyle.cpp.patched	2024-09-29 20:08:24.625812666 +0200
@@ -1014,9 +1014,6 @@
     case PE_FrameStatusBarItem:
         fcn = &Style::emptyPrimitive;
         break;
-    case PE_Frame:
-        fcn = &Style::drawFramePrimitive;
-        break;
     case PE_FrameLineEdit:
         fcn = &Style::drawFrameLineEditPrimitive;
         break;
@@ -3237,61 +3234,6 @@
     return expandSize(size, Metrics::ItemView_ItemMarginWidth);
 }
 
-//______________________________________________________________
-bool Style::drawFramePrimitive(const QStyleOption *option, QPainter *painter, const QWidget *widget) const
-{
-    // copy palette and rect
-    const QPalette &palette(option->palette);
-    const QRect &rect(option->rect);
-
-    // detect title widgets
-    const bool isTitleWidget(Adwaita::Config::TitleWidgetDrawFrame && widget && widget->parent() && widget->parent()->inherits("KTitleWidget"));
-    // copy state
-    const State &state(option->state);
-    if (!isTitleWidget && !(state & (State_Sunken | State_Raised))) {
-        return true;
-    }
-
-    const bool isInputWidget((widget && widget->testAttribute(Qt::WA_Hover))
-                             || (isQtQuickControl(option, widget) && option->styleObject->property("elementType").toString() == QStringLiteral("edit")));
-    bool enabled(state & State_Enabled);
-    bool mouseOver((state & State_Active) && enabled && isInputWidget && (state & State_MouseOver));
-    bool hasFocus(enabled && isInputWidget && (state & State_HasFocus));
-
-    // focus takes precedence over mouse over
-    _animations->inputWidgetEngine().updateState(widget, AnimationFocus, hasFocus);
-    _animations->inputWidgetEngine().updateState(widget, AnimationHover, mouseOver && !hasFocus);
-
-    // retrieve animation mode and opacity
-    AnimationMode mode(_animations->inputWidgetEngine().frameAnimationMode(widget));
-    qreal opacity(_animations->inputWidgetEngine().frameOpacity(widget));
-
-    // Style options
-    StyleOptions styleOptions(palette, _variant);
-    styleOptions.setHasFocus(hasFocus);
-    styleOptions.setMouseOver(mouseOver);
-    styleOptions.setOpacity(opacity);
-    styleOptions.setAnimationMode(mode);
-    styleOptions.setPainter(painter);
-    styleOptions.setRect(rect);
-
-    // render
-    if (!Adwaita::Config::SidePanelDrawFrame && widget && widget->property(PropertyNames::sidePanelView).toBool()) {
-        bool reverseLayout(option->direction == Qt::RightToLeft);
-        Side side(reverseLayout ? SideRight : SideLeft);
-        styleOptions.setColor(Colors::sidePanelOutlineColor(styleOptions));
-        Adwaita::Renderer::renderSidePanelFrame(styleOptions, side);
-    } else if (qobject_cast<const QAbstractScrollArea *>(widget)) {
-        styleOptions.setColor(Colors::frameOutlineColor(styleOptions));
-        Adwaita::Renderer::renderSquareFrame(styleOptions);
-    } else {
-        styleOptions.setColor(isTitleWidget ? palette.color(widget->backgroundRole()) : QColor());
-        styleOptions.setOutlineColor(Colors::frameOutlineColor(styleOptions));
-        Adwaita::Renderer::renderFrame(styleOptions);
-    }
-
-    return true;
-}
 
 //______________________________________________________________
 bool Style::drawFrameLineEditPrimitive(const QStyleOption *option, QPainter *painter, const QWidget *widget) const
