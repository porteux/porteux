From 60f3c2a82376d40b967582b2e89f4b260a707ed5 Mon Sep 17 00:00:00 2001
From: xfall <contact.trust@tuta.io>
Date: Sat, 7 Jun 2025 17:04:53 -0300
Subject: [PATCH] feat: Support to Wayland

---
 src/working-area.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/src/working-area.c b/src/working-area.c
index 86a1fa5..b93249a 100644
--- a/src/working-area.c
+++ b/src/working-area.c
@@ -23,14 +23,19 @@
 */
 
 # include <gdk/gdk.h>
+#ifndef GDK_WINDOWING_WAYLAND
 # include <gdk/gdkx.h>
 # include <X11/Xlib.h>
 # include <X11/Xutil.h>
 # include <X11/Xatom.h>
+#endif
 
 void get_working_area(GdkScreen* screen, GdkRectangle *rect);
 
 static gboolean gf_display_get_workarea(GdkScreen* g_screen, GdkRectangle *rect) {
+#ifdef GDK_WINDOWING_WAYLAND
+	return FALSE;
+#else
 	Atom xa_desktops, xa_current, xa_workarea, xa_type;
 	Display *x_display;
 	Window x_root;
@@ -134,6 +139,7 @@ static gboolean gf_display_get_workarea(GdkScreen* g_screen, GdkRectangle *rect)
 	XFree(data);
 
 	return TRUE;
+#endif
 }
 
 void get_working_area(GdkScreen* screen, GdkRectangle *rect)
From 073736ff0e7c1c1b6f72faaf1c6e85e7e6c424d4 Mon Sep 17 00:00:00 2001
From: xfall <contact.trust@tuta.io>
Date: Sun, 8 Jun 2025 20:36:28 -0300
Subject: [PATCH] refactor: X11 checking at both compile and runtime

---
 src/working-area.c | 230 ++++++++++++++++++++++++---------------------
 1 file changed, 121 insertions(+), 109 deletions(-)

diff --git a/src/working-area.c b/src/working-area.c
index b93249a..c7741f5 100644
--- a/src/working-area.c
+++ b/src/working-area.c
@@ -22,124 +22,136 @@
   This piece of code detecting working area is got from Guifications, a plug-in for Gaim.
 */
 
-# include <gdk/gdk.h>
-#ifndef GDK_WINDOWING_WAYLAND
-# include <gdk/gdkx.h>
-# include <X11/Xlib.h>
-# include <X11/Xutil.h>
-# include <X11/Xatom.h>
+#include <gdk/gdk.h>
+#ifdef GDK_WINDOWING_WAYLAND
+#include <gdk/gdkwayland.h>
+#endif
+#ifdef GDK_WINDOWING_X11
+#include <gdk/gdkx.h>
+#include <X11/Xlib.h>
+#include <X11/Xutil.h>
+#include <X11/Xatom.h>
 #endif
 
+
 void get_working_area(GdkScreen* screen, GdkRectangle *rect);
 
 static gboolean gf_display_get_workarea(GdkScreen* g_screen, GdkRectangle *rect) {
-#ifdef GDK_WINDOWING_WAYLAND
-	return FALSE;
-#else
-	Atom xa_desktops, xa_current, xa_workarea, xa_type;
-	Display *x_display;
-	Window x_root;
-	guint32 desktops = 0, current = 0;
-	gulong *workareas, len, fill;
-	guchar *data;
-	gint format;
-
 	GdkDisplay *g_display;
-	Screen *x_screen;
 
 	/* get the gdk display */
-	g_display = gdk_display_get_default();
-	if(!g_display)
-		return FALSE;
-
-	/* get the x display from the gdk display */
-	x_display = gdk_x11_display_get_xdisplay(g_display);
-	if(!x_display)
-		return FALSE;
-
-	/* get the x screen from the gdk screen */
-	x_screen = gdk_x11_screen_get_xscreen(g_screen);
-	if(!x_screen)
-		return FALSE;
-
-	/* get the root window from the screen */
-	x_root = XRootWindowOfScreen(x_screen);
-
-	/* find the _NET_NUMBER_OF_DESKTOPS atom */
-	xa_desktops = XInternAtom(x_display, "_NET_NUMBER_OF_DESKTOPS", True);
-	if(xa_desktops == None)
+	if (!(g_display = gdk_display_get_default()))
 		return FALSE;
 
-	/* get the number of desktops */
-	if(XGetWindowProperty(x_display, x_root, xa_desktops, 0, 1, False,
-						  XA_CARDINAL, &xa_type, &format, &len, &fill,
-						  &data) != Success)
-	{
-		return FALSE;
-	}
-
-	if(!data)
-		return FALSE;
-
-	desktops = *(guint32 *)data;
-	XFree(data);
-
-	/* find the _NET_CURRENT_DESKTOP atom */
-	xa_current = XInternAtom(x_display, "_NET_CURRENT_DESKTOP", True);
-	if(xa_current == None)
-		return FALSE;
-
-	/* get the current desktop */
-	if(XGetWindowProperty(x_display, x_root, xa_current, 0, 1, False,
-						  XA_CARDINAL, &xa_type, &format, &len, &fill,
-						  &data) != Success)
-	{
-		return FALSE;
-	}
-
-	if(!data)
-		return FALSE;
-
-	current = *(guint32 *)data;
-	XFree(data);
-
-	/* find the _NET_WORKAREA atom */
-	xa_workarea = XInternAtom(x_display, "_NET_WORKAREA", True);
-	if(xa_workarea == None)
-		return FALSE;
-
-	if(XGetWindowProperty(x_display, x_root, xa_workarea, 0, (glong)(4 * 32),
-						  False, AnyPropertyType, &xa_type, &format, &len,
-						  &fill, &data) != Success)
-	{
-		return FALSE;
-	}
-
-	/* make sure the type and format are good */
-	if(xa_type == None || format == 0)
-		return FALSE;
-
-	/* make sure we don't have any leftovers */
-	if(fill)
-		return FALSE;
-
-	/* make sure len divides evenly by 4 */
-	if(len % 4)
-		return FALSE;
-
-	/* it's good, lets use it */
-	workareas = (gulong *)(guint32 *)data;
-
-	rect->x = (guint32)workareas[current * 4];
-	rect->y = (guint32)workareas[current * 4 + 1];
-	rect->width = (guint32)workareas[current * 4 + 2];
-	rect->height = (guint32)workareas[current * 4 + 3];
-
-	/* clean up our memory */
-	XFree(data);
-
-	return TRUE;
-#endif
+	#ifdef GDK_WINDOWING_WAYLAND
+		if (GDK_IS_WAYLAND_DISPLAY (g_display))
+			return FALSE;
+		else
+	#endif
+	#ifdef GDK_WINDOWING_X11
+		if (GDK_IS_X11_DISPLAY (g_display))
+		{
+			Atom xa_desktops, xa_current, xa_workarea, xa_type;
+			Display *x_display;
+			Window x_root;
+			guint32 desktops = 0, current = 0;
+			gulong *workareas, len, fill;
+			guchar *data;
+			gint format;
+
+			Screen *x_screen;
+
+			/* get the x display from the gdk display */
+			x_display = gdk_x11_display_get_xdisplay(g_display);
+			if(!x_display)
+				return FALSE;
+
+			/* get the x screen from the gdk screen */
+			x_screen = gdk_x11_screen_get_xscreen(g_screen);
+			if(!x_screen)
+				return FALSE;
+
+			/* get the root window from the screen */
+			x_root = XRootWindowOfScreen(x_screen);
+
+			/* find the _NET_NUMBER_OF_DESKTOPS atom */
+			xa_desktops = XInternAtom(x_display, "_NET_NUMBER_OF_DESKTOPS", True);
+			if(xa_desktops == None)
+				return FALSE;
+
+			/* get the number of desktops */
+			if(XGetWindowProperty(x_display, x_root, xa_desktops, 0, 1, False,
+								  XA_CARDINAL, &xa_type, &format, &len, &fill,
+								  &data) != Success)
+			{
+				return FALSE;
+			}
+
+			if(!data)
+				return FALSE;
+
+			desktops = *(guint32 *)data;
+			XFree(data);
+
+			/* find the _NET_CURRENT_DESKTOP atom */
+			xa_current = XInternAtom(x_display, "_NET_CURRENT_DESKTOP", True);
+			if(xa_current == None)
+				return FALSE;
+
+			/* get the current desktop */
+			if(XGetWindowProperty(x_display, x_root, xa_current, 0, 1, False,
+								  XA_CARDINAL, &xa_type, &format, &len, &fill,
+								  &data) != Success)
+			{
+				return FALSE;
+			}
+
+			if(!data)
+				return FALSE;
+
+			current = *(guint32 *)data;
+			XFree(data);
+
+			/* find the _NET_WORKAREA atom */
+			xa_workarea = XInternAtom(x_display, "_NET_WORKAREA", True);
+			if(xa_workarea == None)
+				return FALSE;
+
+			if(XGetWindowProperty(x_display, x_root, xa_workarea, 0, (glong)(4 * 32),
+								  False, AnyPropertyType, &xa_type, &format, &len,
+								  &fill, &data) != Success)
+			{
+				return FALSE;
+			}
+
+			/* make sure the type and format are good */
+			if(xa_type == None || format == 0)
+				return FALSE;
+
+			/* make sure we don't have any leftovers */
+			if(fill)
+				return FALSE;
+
+			/* make sure len divides evenly by 4 */
+			if(len % 4)
+				return FALSE;
+
+			/* it's good, lets use it */
+			workareas = (gulong *)(guint32 *)data;
+
+			rect->x = (guint32)workareas[current * 4];
+			rect->y = (guint32)workareas[current * 4 + 1];
+			rect->width = (guint32)workareas[current * 4 + 2];
+			rect->height = (guint32)workareas[current * 4 + 3];
+
+			/* clean up our memory */
+			XFree(data);
+
+			return TRUE;
+		}
+		else
+	#endif
+			g_error ("Unsupported GDK backend");
 }
 
 void get_working_area(GdkScreen* screen, GdkRectangle *rect)
@@ -151,4 +163,4 @@ void get_working_area(GdkScreen* screen, GdkRectangle *rect)
 		rect->width = gdk_screen_width();
 		rect->height = gdk_screen_height();
 	}
-}
+}
\ No newline at end of file
From 068b68e2855841c590ede9e7e402ab36d8b987b8 Mon Sep 17 00:00:00 2001
From: xfall <contact.trust@tuta.io>
Date: Tue, 10 Jun 2025 10:55:33 -0300
Subject: [PATCH] refactor: Wayland check unnecessary

---
 src/working-area.c | 211 ++++++++++++++++++++++-----------------------
 1 file changed, 101 insertions(+), 110 deletions(-)

diff --git a/src/working-area.c b/src/working-area.c
index c7741f5..2304fce 100644
--- a/src/working-area.c
+++ b/src/working-area.c
@@ -23,9 +23,6 @@
 */
 
 #include <gdk/gdk.h>
-#ifdef GDK_WINDOWING_WAYLAND
-#include <gdk/gdkwayland.h>
-#endif
 #ifdef GDK_WINDOWING_X11
 #include <gdk/gdkx.h>
 #include <X11/Xlib.h>
@@ -43,115 +40,109 @@ static gboolean gf_display_get_workarea(GdkScreen* g_screen, GdkRectangle *rect)
 	if (!(g_display = gdk_display_get_default()))
 		return FALSE;
 
-	#ifdef GDK_WINDOWING_WAYLAND
-		if (GDK_IS_WAYLAND_DISPLAY (g_display))
+#ifdef GDK_WINDOWING_X11
+	if (GDK_IS_X11_DISPLAY (g_display))
+	{
+		Atom xa_desktops, xa_current, xa_workarea, xa_type;
+		Display *x_display;
+		Window x_root;
+		guint32 desktops = 0, current = 0;
+		gulong *workareas, len, fill;
+		guchar *data;
+		gint format;
+
+		Screen *x_screen;
+
+		/* get the x display from the gdk display */
+		x_display = gdk_x11_display_get_xdisplay(g_display);
+		if(!x_display)
+			return FALSE;
+
+		/* get the x screen from the gdk screen */
+		x_screen = gdk_x11_screen_get_xscreen(g_screen);
+		if(!x_screen)
 			return FALSE;
-		else
-	#endif
-	#ifdef GDK_WINDOWING_X11
-		if (GDK_IS_X11_DISPLAY (g_display))
+
+		/* get the root window from the screen */
+		x_root = XRootWindowOfScreen(x_screen);
+
+		/* find the _NET_NUMBER_OF_DESKTOPS atom */
+		xa_desktops = XInternAtom(x_display, "_NET_NUMBER_OF_DESKTOPS", True);
+		if(xa_desktops == None)
+			return FALSE;
+
+		/* get the number of desktops */
+		if(XGetWindowProperty(x_display, x_root, xa_desktops, 0, 1, False,
+			XA_CARDINAL, &xa_type, &format, &len, &fill,
+			&data) != Success)
 		{
-			Atom xa_desktops, xa_current, xa_workarea, xa_type;
-			Display *x_display;
-			Window x_root;
-			guint32 desktops = 0, current = 0;
-			gulong *workareas, len, fill;
-			guchar *data;
-			gint format;
-
-			Screen *x_screen;
-
-			/* get the x display from the gdk display */
-			x_display = gdk_x11_display_get_xdisplay(g_display);
-			if(!x_display)
-				return FALSE;
-
-			/* get the x screen from the gdk screen */
-			x_screen = gdk_x11_screen_get_xscreen(g_screen);
-			if(!x_screen)
-				return FALSE;
-
-			/* get the root window from the screen */
-			x_root = XRootWindowOfScreen(x_screen);
-
-			/* find the _NET_NUMBER_OF_DESKTOPS atom */
-			xa_desktops = XInternAtom(x_display, "_NET_NUMBER_OF_DESKTOPS", True);
-			if(xa_desktops == None)
-				return FALSE;
-
-			/* get the number of desktops */
-			if(XGetWindowProperty(x_display, x_root, xa_desktops, 0, 1, False,
-								  XA_CARDINAL, &xa_type, &format, &len, &fill,
-								  &data) != Success)
-			{
-				return FALSE;
-			}
-
-			if(!data)
-				return FALSE;
-
-			desktops = *(guint32 *)data;
-			XFree(data);
-
-			/* find the _NET_CURRENT_DESKTOP atom */
-			xa_current = XInternAtom(x_display, "_NET_CURRENT_DESKTOP", True);
-			if(xa_current == None)
-				return FALSE;
-
-			/* get the current desktop */
-			if(XGetWindowProperty(x_display, x_root, xa_current, 0, 1, False,
-								  XA_CARDINAL, &xa_type, &format, &len, &fill,
-								  &data) != Success)
-			{
-				return FALSE;
-			}
-
-			if(!data)
-				return FALSE;
-
-			current = *(guint32 *)data;
-			XFree(data);
-
-			/* find the _NET_WORKAREA atom */
-			xa_workarea = XInternAtom(x_display, "_NET_WORKAREA", True);
-			if(xa_workarea == None)
-				return FALSE;
-
-			if(XGetWindowProperty(x_display, x_root, xa_workarea, 0, (glong)(4 * 32),
-								  False, AnyPropertyType, &xa_type, &format, &len,
-								  &fill, &data) != Success)
-			{
-				return FALSE;
-			}
-
-			/* make sure the type and format are good */
-			if(xa_type == None || format == 0)
-				return FALSE;
-
-			/* make sure we don't have any leftovers */
-			if(fill)
-				return FALSE;
-
-			/* make sure len divides evenly by 4 */
-			if(len % 4)
-				return FALSE;
-
-			/* it's good, lets use it */
-			workareas = (gulong *)(guint32 *)data;
-
-			rect->x = (guint32)workareas[current * 4];
-			rect->y = (guint32)workareas[current * 4 + 1];
-			rect->width = (guint32)workareas[current * 4 + 2];
-			rect->height = (guint32)workareas[current * 4 + 3];
-
-			/* clean up our memory */
-			XFree(data);
-
-			return TRUE;
+			return FALSE;
 		}
-		else
-	#endif
-			g_error ("Unsupported GDK backend");
+
+		if(!data)
+			return FALSE;
+
+		desktops = *(guint32 *)data;
+		XFree(data);
+
+		/* find the _NET_CURRENT_DESKTOP atom */
+		xa_current = XInternAtom(x_display, "_NET_CURRENT_DESKTOP", True);
+		if(xa_current == None)
+			return FALSE;
+
+		/* get the current desktop */
+		if(XGetWindowProperty(x_display, x_root, xa_current, 0, 1, False,
+			XA_CARDINAL, &xa_type, &format, &len, &fill,
+			&data) != Success)
+		{
+			return FALSE;
+		}
+
+		if(!data)
+			return FALSE;
+
+		current = *(guint32 *)data;
+		XFree(data);
+
+		/* find the _NET_WORKAREA atom */
+		xa_workarea = XInternAtom(x_display, "_NET_WORKAREA", True);
+		if(xa_workarea == None)
+			return FALSE;
+
+		if(XGetWindowProperty(x_display, x_root, xa_workarea, 0, (glong)(4 * 32),
+			False, AnyPropertyType, &xa_type, &format, &len,
+			&fill, &data) != Success)
+		{
+			return FALSE;
+		}
+
+		/* make sure the type and format are good */
+		if(xa_type == None || format == 0)
+			return FALSE;
+
+		/* make sure we don't have any leftovers */
+		if(fill)
+			return FALSE;
+
+		/* make sure len divides evenly by 4 */
+		if(len % 4)
+			return FALSE;
+
+		/* it's good, lets use it */
+		workareas = (gulong *)(guint32 *)data;
+
+		rect->x = (guint32)workareas[current * 4];
+		rect->y = (guint32)workareas[current * 4 + 1];
+		rect->width = (guint32)workareas[current * 4 + 2];
+		rect->height = (guint32)workareas[current * 4 + 3];
+
+		/* clean up our memory */
+		XFree(data);
+
+		return TRUE;
+	}
+#endif
+    return FALSE;
 }
 
 void get_working_area(GdkScreen* screen, GdkRectangle *rect)
@@ -163,4 +154,4 @@ void get_working_area(GdkScreen* screen, GdkRectangle *rect)
 		rect->width = gdk_screen_width();
 		rect->height = gdk_screen_height();
 	}
-}
\ No newline at end of file
+}
